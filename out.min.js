var e=Symbol(),t=(e,t,...r)=>({type:e,props:t,children:r});function r(e){let t="";for(let r=0,n="";r<e.length;r++)n=e.charAt(r),t+=n>="A"&&n<="Z"?"-"+n.toLowerCase():n;return t}var n=document.createElement.bind(document),o=document.createElementNS.bind(document,"http://www.w3.org/2000/svg"),s=new Set,c=new WeakMap,i=new WeakMap,l=(e,t,r,n,o)=>{switch(r){case"key":return;case"ref":return void(n.current=e);case"value":case"checked":if("input"===t)return void(e[r]=n);case"style":return e.setAttribute("style",n),void(o.style=e.getAttributeNode("style"))}const s=r;let c;switch(typeof n){case"string":case"number":return e.setAttributeNode(c=o[r]=document.createAttribute(s)),void(c.value=n);case"function":return e.setAttributeNode(c=o[r]=document.createAttribute(s)),c.value="",void(e[s]=n);case"boolean":return void(n&&(e.setAttributeNode(c=o[r]=document.createAttribute(s)),c.value=""));default:e[r]=n}},p=(e,t,r,n={})=>{for(const o in r)l(e,t,o,r[o],n);c.set(e,{props:r,attrs:n})},u=(e,t,r)=>{if(!c.has(e))return r&&p(e,t,r);const n=c.get(e),{attrs:o,props:s}=n;if(!r){for(const t in o)e.removeAttributeNode(o[t]);for(const t in s)delete e[t];return void c.delete(e)}let i;e:for(const n in s)if(n in r){switch(i=r[n],n){case"ref":e!==i.current&&(i.current=e);continue e;case"value":case"checked":if("input"===t){e[n]!==i&&(e[n]=i);continue e}}if(s[n]!==i)if("function"==typeof i){const t=n;s[t]=e[t]=i}else n in o||(e[n]=i)}else delete e[n];for(const t in o)t in r&&!1!==r[t]?s[t]!==(i=r[t])&&"function"!=typeof i&&(o[t].value=i):(e.removeAttributeNode(o[t]),delete o[t]);for(const n in r)n in o||n in s||l(e,t,n,r[n],o);n.props=r},a=(t,s=n)=>{switch(typeof t){case"string":case"number":return[t.toString()];case"boolean":case"undefined":return[""]}if(Array.isArray(t)){const e=[];for(let r=0;r<t.length;r++)e.push(...a(t[r],s));return e.keyed=null!=e[0]?.props?.key,e}const c=t.type;if("function"==typeof c){const e=t.type({...t.props,children:t.children});return null!=t.props?.key&&(e.props={key:t.props.key}),a(e,s)}switch(c){case e:return a(t.children,s);case"svg":s=o;default:return t.props?.style&&"object"==typeof t.props.style&&(t.props.style=(e=>{let t="";for(const n in e)t+=r(n)+":"+e[n]+";";return t})(t.props.style)),[{create:s,type:c,props:t.props,children:a(t.children,"foreignObject"===c&&n||s)}]}},d=({create:e,type:t,props:r,children:n})=>{const o=e(t);if(r&&p(o,t,r),n.keyed)y(o,n);else for(let e=0;e<n.length;e++)f(o,n[e]);return o},f=(e,t)=>{const r="string"==typeof t?t:d(t);return e.append(r),r},h=(e,t,r)=>{"string"!=typeof r?t.nodeName.toUpperCase()===r.type.toUpperCase()?(u(t,r.type,r.props),g(t,r.children)):e.replaceChild(d(r),t):r!==t.nodeValue&&(t.nodeValue=r)},y=(e,t)=>{const r=new Map;for(let n=0;n<t.length;n++){const o=t[n];r.set(o.props.key,{i:n,el:f(e,o)})}i.set(e,r)},g=(e,t)=>{if(i.has(e)){s.clear();const r=i.get(e);for(let n,o=0;o<t.length;o++){const c=t[o],i=c.props.key;let l;if(s.add(i),r.has(i)){const t=r.get(i);l=t.el,u(l,c.type,c.props),g(l,c.children),t.i>o&&(t.i=o,o?n.after(l):e.prepend(l))}else l=d(c),r.set(i,{i:o,el:l}),o?n.after(l):e.prepend(l);n=l}for(const t of r.keys())s.has(t)||(e.removeChild(r.get(t).el),r.delete(t));return}if(t.keyed)return void y(e,t);const r=e.childNodes,n=r.length;if(t.length>=n){for(let o=0;o<n;o++)h(e,r[o],t[o]);for(let r=n;r<t.length;r++)f(e,t[r])}else{for(let r=t.length;r<n;r++)e.removeChild(e.lastChild);for(let n=0;n<t.length;n++)h(e,r[n],t[n])}},v=(e,t)=>g(t,a(e));export{e as Fragment,t as h,v as render};